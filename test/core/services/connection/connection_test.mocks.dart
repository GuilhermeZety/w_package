// Mocks generated by Mockito 5.4.0 from annotations
// in w_package/test/core/services/connection/connection_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:w_package/core/services/requests/dio_request_service.dart'
    as _i3;
import 'package:w_package/core/services/requests/request_result.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRequestResult_0 extends _i1.SmartFake implements _i2.RequestResult {
  _FakeRequestResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DioRequestService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioRequestService extends _i1.Mock implements _i3.DioRequestService {
  @override
  _i4.Future<_i2.RequestResult> get(
    String? url, {
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<_i2.RequestResult>.value(_FakeRequestResult_0(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.RequestResult>.value(_FakeRequestResult_0(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i4.Future<_i2.RequestResult>);
  @override
  _i4.Future<_i2.RequestResult> post(
    String? url, {
    Map<String, dynamic>? body,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #body: body,
            #headers: headers,
          },
        ),
        returnValue: _i4.Future<_i2.RequestResult>.value(_FakeRequestResult_0(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #body: body,
              #headers: headers,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.RequestResult>.value(_FakeRequestResult_0(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #body: body,
              #headers: headers,
            },
          ),
        )),
      ) as _i4.Future<_i2.RequestResult>);
  @override
  _i4.Future<_i2.RequestResult> put(
    String? url, {
    Map<String, dynamic>? body,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #body: body,
            #headers: headers,
          },
        ),
        returnValue: _i4.Future<_i2.RequestResult>.value(_FakeRequestResult_0(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #body: body,
              #headers: headers,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.RequestResult>.value(_FakeRequestResult_0(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #body: body,
              #headers: headers,
            },
          ),
        )),
      ) as _i4.Future<_i2.RequestResult>);
  @override
  _i4.Future<_i2.RequestResult> patch(
    String? url, {
    Map<String, dynamic>? body,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #body: body,
            #headers: headers,
          },
        ),
        returnValue: _i4.Future<_i2.RequestResult>.value(_FakeRequestResult_0(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #body: body,
              #headers: headers,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.RequestResult>.value(_FakeRequestResult_0(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #body: body,
              #headers: headers,
            },
          ),
        )),
      ) as _i4.Future<_i2.RequestResult>);
  @override
  _i4.Future<_i2.RequestResult> delete(
    String? url, {
    Map<String, dynamic>? body,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #body: body,
            #headers: headers,
          },
        ),
        returnValue: _i4.Future<_i2.RequestResult>.value(_FakeRequestResult_0(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #body: body,
              #headers: headers,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.RequestResult>.value(_FakeRequestResult_0(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #body: body,
              #headers: headers,
            },
          ),
        )),
      ) as _i4.Future<_i2.RequestResult>);
}
